
	;; Imported functions

	.area	_HEADER (ABS)
	
	;; SDSC ROM header
	.org 0x7fe0
	.ascii "SDSC"
	.db 0xff,0xff			; Version (BCD)
	.db 0xff,0xff,0xff,0xff	; Date DD/MM/YYYY (BCD)
	.dw #sdsc_author		; Author pointer
	.dw #sdsc_name			; Name pointer
	.dw #sdsc_description	; Description pointer
	
	;; SEGA header
	.ascii "TMR SEGA"
	.db 0xFF, 0xFF			;Reserved bytes
	.db 0xFF, 0xFF			;Checksum
	.db 0xFF, 0xFF, 0xFF	;Product code and version
	.db 0x6c				;Export SEGA, 32K.
	
	;;Make NMI RESET the ROM
	.org 0x0066
	JR 0x0000
	
	;; Entry point
	.org 0x0000
	DI
	JP init
	
	;; RAM entry point
	;.org 0xC000
	;DI
	;JP init

	.area _CODE (REL)
	DI
	JP init
	.ascii "/test-crc16-xmodem.S"
	.include /macros.inc/
	.include /crc16-xmodem.inc/

txt_hello:
	.ascii "------------------------------  "
	.ascii "--   CRC-16 unit test ROM   --  "
	.ascii "------------------------------  "
	.ascii "Testing: "
	.db 0x00

txt_success:
	.ascii " OK"
	.db 0x00

txt_fail:
	.ascii " Err!"
	.db 0x00

	;Test cases
	;A byte of data legth, two bytes of CRC (little endian) and the data

test_case_count:
	.db 0x03

test_cases:
	;Case 1:
	.db 16
	.dw 0x513d
	.db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

	;Case 2:
	.db 16
	.dw 0x517c
	.db 255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240

	;Case 3: 256 bytes of random noise
	.db 0
	.dw 0x1456
	.db 0xAB, 0x36, 0x68, 0xD8, 0x4E, 0x0E, 0xF4, 0x4F, 0x34, 0x75, 0x77, 0x87, 0x84, 0x74, 0x2F, 0x85
	.db 0x81, 0x39, 0x4A, 0x83, 0x9F, 0x63, 0xF0, 0x08, 0x89, 0xBE, 0xAD, 0x34, 0x8B, 0x78, 0x0D, 0xCF
	.db 0x0C, 0x94, 0x83, 0xD9, 0x40, 0xBA, 0xA4, 0x6E, 0x5C, 0x82, 0xC4, 0xF6, 0x1E, 0x9C, 0x06, 0x4D
	.db 0x1A, 0x5E, 0x70, 0xEF, 0x87, 0xF2, 0x88, 0xEF, 0x58, 0x73, 0x0B, 0x1E, 0xFA, 0x04, 0x11, 0xF1
	.db 0xA8, 0x7B, 0x0A, 0x32, 0x3A, 0x39, 0x89, 0x65, 0x9E, 0x54, 0x2A, 0x89, 0xA4, 0xB6, 0xC1, 0x87
	.db 0xE0, 0x4E, 0x5D, 0x73, 0xAE, 0xF8, 0x69, 0x3F, 0x2A, 0xC8, 0xE9, 0x6B, 0xFE, 0xA0, 0xD5, 0x3B
	.db 0xD6, 0xC5, 0xB0, 0x9B, 0xDC, 0x4E, 0xE5, 0x0D, 0x2C, 0x2F, 0x53, 0xAA, 0xC5, 0xD2, 0x0C, 0xA7
	.db 0xC0, 0x2B, 0xD4, 0xB2, 0x82, 0x3E, 0x64, 0x5B, 0x4D, 0x07, 0x1B, 0x06, 0x82, 0x76, 0x11, 0x54
	.db 0x5D, 0x0A, 0x00, 0x68, 0x1C, 0xC9, 0x81, 0x63, 0xAA, 0x9B, 0x74, 0x15, 0x3E, 0xAA, 0x87, 0x53
	.db 0x8C, 0xD1, 0x8C, 0x0D, 0xD8, 0xA4, 0x29, 0x5D, 0xC9, 0xDC, 0x78, 0xD5, 0x32, 0x75, 0xDF, 0x92
	.db 0x69, 0x2C, 0xB8, 0xBE, 0x58, 0x38, 0xF2, 0xDD, 0x39, 0x45, 0x92, 0xA4, 0x44, 0xE0, 0x22, 0xE9
	.db 0x2F, 0x41, 0xFB, 0xBE, 0xD6, 0xA6, 0x69, 0x79, 0x2C, 0xF3, 0xE5, 0x60, 0x5F, 0x69, 0x8E, 0x23
	.db 0xC1, 0xDC, 0x6B, 0x49, 0xCE, 0xF3, 0xD5, 0x33, 0xEB, 0x15, 0x43, 0xB4, 0xBA, 0x1F, 0x66, 0x12
	.db 0xD3, 0x9B, 0x52, 0x16, 0xE5, 0x60, 0xF5, 0xFE, 0x7C, 0x6F, 0x12, 0x26, 0x62, 0xD8, 0x97, 0x8D
	.db 0x27, 0x2F, 0x7A, 0x02, 0x8D, 0x65, 0x0A, 0x3E, 0x49, 0xB8, 0x31, 0x7E, 0xB2, 0x27, 0x2C, 0x9E
	.db 0xF1, 0x51, 0x98, 0x31, 0x64, 0x84, 0xD9, 0x75, 0x8A, 0x99, 0xE6, 0xCF, 0x09, 0xCB, 0x05, 0x84 


perform_test:
	PUSH BC

	;Store payload size on C
	LD C, (HL)
	INC HL

	;Load Expected CRC on DE
	LD E, (HL)
	INC HL
	LD D, (HL)
	INC HL

	EXX 
	LD HL, #0x00
	EXX

	crc_loop:
		LD A, (HL)
		INC HL
		;EX AF, AF ;Move Next byte to shadow regs
		
		EXX ;Perform CRC using shadow regs.
		crc16_xmodem
		EXX

		DEC C
		JP NZ, crc_loop
	;Save HL
	PUSH HL
	;Save calculated checksum
	EXX
	PUSH HL
	EXX
	POP HL ;Retrieve checksum

	;Compare DE with HL
	XOR A, A ;Clear A
	AND A, A ;Clear carry
	SBC HL, DE

	CP A, H
	JR NZ, crc_error
	CP A, L
	JR NZ, crc_success

	;print '*' on success, '!' on error.
	crc_success:
	XOR A, A
	putc #0x2A
	JR crc_end
	crc_error:
	LD A, #0xFF
	putc #0x21
	crc_end:

	;Restore HL
	POP HL
	POP BC
	RET

	;; Initialize
init:
	LD SP, #0xE000
	JP vdp_init
vdp_init_ret::
	;Show some info
	puts #txt_hello

	;Prepare for tests
	LD HL, #test_case_count
	LD C, (HL)
	LD B, #0x00  ;Error flag
	LD HL, #test_cases
	testcase_loop:
		DEC C

		CALL perform_test
		OR A, B
		LD B, A

		LD A, C
		AND A, A
		JR NZ, testcase_loop
	LD A, B
	AND A, B

	JR Z, end_success

	puts #txt_fail
	JR endloop

end_success:
	puts #txt_success
		
endloop:
	JP endloop
	
	;SDSC info
sdsc_author::
	.ascii "Heavydeck <root@heavydeck.net>"
	.db 0x00

sdsc_name::
	.ascii "Unit test ROM for XMODEM CRC16 checksum"
	.db 0x00

sdsc_description::
	.ascii "Just that, checks against a known-working implementation in C"
	.db 0x00
	;End of file
	.ascii "uwu "
	

;Make the compiler quit complaining about _DATA
.area   _HOME
.area   _CODE
.area   _INITIALIZER
.area   _GSINIT
.area   _GSFINAL

.area   _DATA
.area   _INITIALIZED
.area   _BSEG
.area   _BSS
.area   _HEAP

.area   _CODE
